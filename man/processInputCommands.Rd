% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/processInputCommands.R
\name{processInputCommands}
\alias{processInputCommands}
\alias{resetInputCache}
\alias{wrapInput}
\alias{augere.input}
\title{Process commands for a pipeline input}
\usage{
processInputCommands(x, name)

resetInputCache()

wrapInput(object, commands)
}
\arguments{
\item{x}{An arbitrary R object.
Alternatively, a list with the \code{augere.input} class, created by \code{createInput}.}

\item{name}{String containing the name of the object in the Rmarkdown report.}

\item{object}{An arbitrary R object.
Alternatively \code{NULL}, in which case the object will be generated from \code{commands}.}

\item{commands}{Character vector of R commands to be used to generate \code{object}.
If missing, this is obtained by deparsing the expression supplied as \code{object}.
Alternatively \code{NULL}, if no commands are available.}
}
\value{
\code{processInputCommands} will return a string containing R commands that can be inserted into an Rmarkdown code chunk.
If \code{x} is an \code{augere.input} with non-\code{NULL} commands, those commands will be used directly.
Otherwise, a \code{stop} command will be generated that instructs the user to manually insert commands to generate \code{x}.

\code{wrapInput} will return an \code{augere.input} list containing the \code{object} and \code{commands} fields.

\code{resetInputCache} will set the input cache to an empty list.
It returns a function that restores the input cache to the state prior to the function's invocation.
}
\description{
Convert an input object into commands that can be stored in an Rmarkdown report for a reproducible analysis.
}
\details{
Pipeline developers should call \code{processInputCommands} to define the generation of input objects in the Rmarkdown report.
Each call to \code{processInputCommands} will store the input R object in an internal cache.
Upon compiling the report with \code{\link{compileReport}}, the cached object will be used instead of rerunning the code returned by \code{processInputCommands}.
This saves time and avoids errors for inputs that have no associated commands.
(The exception is if \code{object=NULL}, in which case the commands must be run to generate the object.)

At the start of a pipeline function, it is good practice to call \code{resetInputCache}.
This clears any existing cached inputs from calls to other pipeline functions,
e.g., in the pathological case where one pipeline function is called within another function.
The function returned by \code{resetInputCache} should then be called once the pipeline function completes, e.g., in an \code{\link{on.exit}} block.
}
\examples{
fun <- resetInputCache()

df <- data.frame(foo=1:5, bar=LETTERS[2:6])
cat(processInputCommands(df, "my_df"))

wrapped <- wrapInput(df, c("y <- data.frame(foo = 1:5)", "y$bar <- LETTERS[2:6]", "y"))
cat(processInputCommands(wrapped, "my_df"))

fun()
}
\seealso{
\code{\link{compileReport}}, which uses the input cache. 

\code{\link{replacePlaceholders}}, to insert the input commands into the Rmarkdown template.
}
\author{
Aaron Lun
}
