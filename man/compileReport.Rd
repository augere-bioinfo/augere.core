% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compileReport.R
\name{compileReport}
\alias{compileReport}
\title{Compile an Rmarkdown report}
\usage{
compileReport(file, env, skip.chunks = NULL)
}
\arguments{
\item{file}{String containing a path to an Rmarkdown file.}

\item{env}{Environment in which the R code is to be evaluated.}

\item{skip.chunks}{Character vector of the names of Rmarkdown chunks to skip.}
}
\value{
Code chunks from \code{file} are compiled, typically populating \code{env} with new variables.
\code{NULL} is invisibly returned.
}
\description{
Compile a Rmarkdown report, typically generated from a template in a pipeline function.
}
\details{
This function leverages the input cache populated by \code{\link{processInputCommands}}.
If a chunk contains code generated by \code{\link{processInputCommands}},
\code{compileReport} will attempt to load the corresponding object from cache instead of re-running the associated code.
This avoids using more time/memory to create an object that is already available in the R session.

If no existing graphics devices are enabled, any plots will be directed to a null device during code chunk evaluation.
This prevents a flash of multiple images on the default graphics device during pipeline execution.

\code{compileReport} automatically changes the working directory to that of \code{file}.
This is consistent with the behavior of \pkg{knitr} and ensures that any relative paths in \code{file} are respected.
}
\examples{
tmp <- tempfile()
dir.create(tmp)
path <- file.path(tmp, "test.Rmd")

write("```{r}
res <- data.frame(foo=1:5, bar=LETTERS[2:6])
write.csv(res, file='results.csv')
```", file=path)

env <- new.env()
compileReport(path, env)
env$res

list.files(dirname(path))

}
\seealso{
\code{\link{processInputCommands}}, to define the input objects in the Rmarkdown file.

\code{\link{extractChunks}} and \code{\link{evaluateChunks}}, to extract the R code chunks and evaluate them, respectively.
}
\author{
Aaron Lun
}
